<?php

namespace UserApiBundle\Repository;

use Doctrine\ORM\{
    EntityRepository,
    NonUniqueResultException
};
use UserApiBundle\Entity\{
    ApiToken,
    Client,
    User
};
use function Doctrine\ORM\QueryBuilder;

/**
 * ApiTokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @method ApiToken|null find($id, $lockMode = null, $lockVersion = null)
 * @method ApiToken|null findOneBy(array $criteria, array $orderBy = null)
 * @method ApiToken[]    findAll()
 * @method ApiToken[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ApiTokenRepository extends EntityRepository
{
    /**
     * @param User $user
     * @param string| $scope
     * @param Client| $client
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getActualTokenByUserScopeClient(User $user, ?string $scope = null, ?Client $client = null)
    {
        $qb = $this->createQueryBuilder('api_token');

        $qb->where($qb->expr()->eq('api_token.user', ':user'));

        if (is_null($scope) && is_null($client)) {
            $qb->andWhere($qb->expr()->isNull('api_token.scope'))
                ->andWhere($qb->expr()->isNull('api_token.client'))
                ->setParameters(['user' => $user]);           
        } else {
            $qb->andWhere($qb->expr()->eq('api_token.scope', ':scope'))
                ->andWhere($qb->expr()->eq('api_token.client', ':client'))
                ->setParameters(['user' => $user,'scope' => $scope, 'client' => $client]);
        }

        return $qb->addOrderBy('api_token.expireAt', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
